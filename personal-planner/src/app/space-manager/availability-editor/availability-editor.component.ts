import { Component, computed, signal } from '@angular/core';
import { DailyTimeSlotEditorComponent } from '../daily-time-slot-editor/daily-time-slot-editor.component';
import {
  ITimeFrameAvailabilityTemplate,
  ITimeSlot,
} from '../../interfaces/time-slot';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-availability-editor',
  imports: [
    DailyTimeSlotEditorComponent,
    MatButtonModule,
    MatIconModule,
    MatInputModule,
    CommonModule,
    FormsModule,
  ],
  templateUrl: './availability-editor.component.html',
  styleUrl: './availability-editor.component.scss',
})
export class AvailabilityEditorComponent {
  days = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday',
  ];

  timeFrameAvailability = signal<ITimeFrameAvailabilityTemplate>({
    name: 'Default template',
    description: 'Autogenerated template for availability',
    dailyAvailabilities: this.days.map((day, index) => ({
      dayIndex: index,
      timeSlots: [],
      isAvailable: true,
      isVisible: true,
      isEditable: true,
    })),
  });

  showUnavailableDays = signal<boolean>(false);

  dailyAvailabilities = computed(() => {
    return this.timeFrameAvailability().dailyAvailabilities;
  });

  countAvailableDays = computed(() => {
    return this.showUnavailableDays()
      ? 7
      : this.dailyAvailabilities().filter(
          (availability) => availability.isAvailable
        ).length;
  });
  plannedTimePortion: number = 0.5;

  onTimeSlotChanged(changedDayTimeSlots: ITimeSlot[], dayIndex: number) {
    this.timeFrameAvailability.update((old) => {
      return {
        ...old,
        dailyAvailabilities: old.dailyAvailabilities.map(
          (availability, index) =>
            index === dayIndex
              ? { ...availability, timeSlots: changedDayTimeSlots }
              : availability
        ),
      };
    });
  }
  onAvailabilityChanged($event: boolean, dayIndex: number) {
    this.timeFrameAvailability.update((old) => {
      return {
        ...old,
        dailyAvailabilities: old.dailyAvailabilities.map(
          (availability, index) =>
            index === dayIndex
              ? { ...availability, isAvailable: $event }
              : availability
        ),
      };
    });
  }

  totalAvailableTime = computed((): number => {
    return this.dailyAvailabilities().reduce((total, availability) => {
      if (availability.isAvailable) {
        return (
          total +
          availability.timeSlots.reduce(
            (dayTotal, slot) =>
              dayTotal +
              (slot.end.hour - slot.start.hour) * 60 +
              (slot.end.minutes - slot.start.minutes),
            0
          )
        );
      }
      return total;
    }, 0);
  });

  toggleDisplayUnavailableDays() {
    this.showUnavailableDays.update((current) => !current);
  }
}
